<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BasicFramework</name>
    </assembly>
    <members>
        <member name="T:BasicFramework.FormAccountManage">
            <summary>
            一个简单的账户管理窗口类
            </summary>
        </member>
        <member name="M:BasicFramework.FormAccountManage.#ctor(System.Func{System.String},System.Func{System.String,System.Boolean})">
            <summary>
            实例化一个简单的账户管理
            </summary>
            <param name="setAccounts">设置账户信息的方法</param>
            <param name="getAccounts">获取账户信息的方法</param>
        </member>
        <member name="F:BasicFramework.FormAccountManage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormAccountManage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormAccountManage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BasicFramework.FormAuthorAdvertisement">
            <summary>
            显示作者一些信息的类，应当在软件系统中提供一处链接显示原作者信息，或者以彩蛋方式实现
            </summary>
        </member>
        <member name="M:BasicFramework.FormAuthorAdvertisement.#ctor">
            <summary>
            示例化一个窗口，显示作者的相关信息
            </summary>
        </member>
        <member name="F:BasicFramework.FormAuthorAdvertisement.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormAuthorAdvertisement.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormAuthorAdvertisement.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BasicFramework.FormInputAndAction">
            <summary>
            支持输入一串字符串并相应数据
            </summary>
        </member>
        <member name="M:BasicFramework.FormInputAndAction.#ctor(System.Func{System.String,System.Boolean},System.String,System.String,System.Int32)">
            <summary>
            实例化一个窗口支持输出和响应
            </summary>
            <param name="action">响应的方法</param>
            <param name="text_default">默认的数据</param>
            <param name="caption">标题</param>
            <param name="length">允许输入的文本的最大长度</param>
        </member>
        <member name="F:BasicFramework.FormInputAndAction.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormInputAndAction.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormInputAndAction.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:BasicFramework.FormLogView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormLogView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormLogView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BasicFramework.FormPasswordModify">
            <summary>
            一个简单的修改密码的类
            </summary>
        </member>
        <member name="M:BasicFramework.FormPasswordModify.#ctor(System.String,System.Func{System.String,System.Boolean},System.Int32,System.Int32)">
            <summary>
            实例化一个密码修改窗口，需要指定密码修改的方法
            </summary>
            <param name="password_old">旧密码，需要用来验证权限</param>
            <param name="submitMethod">修改密码的真正方法</param>
            <param name="passwordLengthMin">指定密码长度最小值，可不提供</param>
            <param name="passwordLengthMax">指定密码长度最大值，可不提供</param>
        </member>
        <member name="F:BasicFramework.FormPasswordModify.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormPasswordModify.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormPasswordModify.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BasicFramework.FormPopup">
            <summary>
            一个用于消息弹出显示的类
            </summary>
        </member>
        <member name="M:BasicFramework.FormPopup.AddNewForm(BasicFramework.FormPopup)">
            <summary>
            新增一个显示的弹出窗口
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:BasicFramework.FormPopup.ResetLocation">
            <summary>
            重置所有弹出窗口的位置
            </summary>
        </member>
        <member name="M:BasicFramework.FormPopup.#ctor">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
        </member>
        <member name="M:BasicFramework.FormPopup.#ctor(System.String)">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
            <param name="infotext">需要显示的文本</param>
        </member>
        <member name="M:BasicFramework.FormPopup.#ctor(System.String,System.Drawing.Color)">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
            <param name="infotext">需要显示的文本</param>
            <param name="infocolor">文本的颜色</param>
        </member>
        <member name="M:BasicFramework.FormPopup.#ctor(System.String,System.Drawing.Color,System.Int32)">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
            <param name="infotext">需要显示的文本</param>
            <param name="infocolor">文本的颜色</param>
            <param name="existTime">指定窗口多少时间后消失，单位毫秒</param>
        </member>
        <member name="M:BasicFramework.FormPopup.LocationUpMove">
            <summary>
            窗体的位置进行向上调整
            </summary>
        </member>
        <member name="M:BasicFramework.FormPopup.LocationUpMove(System.Int32)">
            <summary>
            窗体的位置进行向上调整
            </summary>
        </member>
        <member name="F:BasicFramework.FormPopup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormPopup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormPopup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BasicFramework.SoftAnimation">
            <summary>
            系统框架支持的一些常用的动画特效
            </summary>
        </member>
        <member name="P:BasicFramework.SoftAnimation.TimeFragment">
            <summary>
            最小的时间片段
            </summary>
        </member>
        <member name="M:BasicFramework.SoftAnimation.BeginBackcolorAnimation(System.Windows.Forms.Control,System.Drawing.Color,System.Int32)">
            <summary>
            调整控件背景色
            </summary>
            <param name="control">控件</param>
            <param name="color">设置的颜色</param>
            <param name="time">时间</param>
        </member>
        <member name="T:BasicFramework.IFileSave">
            <summary>
            需要支持文件保存类的接口
            </summary>
        </member>
        <member name="P:BasicFramework.IFileSave.FileSavePath">
            <summary>
            文件存储的路径
            </summary>
        </member>
        <member name="M:BasicFramework.IFileSave.LoadByFile">
            <summary>
            从文件载入数据
            </summary>
        </member>
        <member name="M:BasicFramework.IFileSave.SaveToFile">
            <summary>
            存储数据到文件
            </summary>
        </member>
        <member name="T:BasicFramework.SoftMail">
            <summary>
            软件的邮箱类，用于发送邮箱数据，连续发送10次失败则禁止发送
            </summary>
        </member>
        <member name="P:BasicFramework.SoftMail.SoftMailSendFailedCount">
            <summary>
            系统连续发送失败的次数，为了不影响系统，连续三次失败就禁止发送
            </summary>
        </member>
        <member name="F:BasicFramework.SoftMail.MailSystem163">
            <summary>
            系统提供一个默认的163邮箱发送账号，只要更改接收地址即可发送服务，可能会被拦截
            </summary>
        </member>
        <member name="F:BasicFramework.SoftMail.MailSystemQQ">
            <summary>
            系统提供一个默认的QQ邮箱发送账号，只要更改接收地址即可发送服务，发送成功概率比较高
            </summary>
        </member>
        <member name="M:BasicFramework.SoftMail.#ctor(System.Action{System.Net.Mail.SmtpClient},System.String,System.String)">
            <summary>
            实例化一个邮箱发送类，需要指定初始化信息
            </summary>
            <param name="mailIni">初始化的方法</param>
            <param name="addr_From">发送地址，应该和账户匹配</param>
            <param name="addr_to">邮件接收地址</param>
        </member>
        <member name="P:BasicFramework.SoftMail.smtpClient">
            <summary>
            系统的邮件发送客户端
            </summary>
        </member>
        <member name="P:BasicFramework.SoftMail.MailFromAddress">
            <summary>
            发送邮件的地址
            </summary>
        </member>
        <member name="P:BasicFramework.SoftMail.MailSendAddress">
            <summary>
            邮件发送的地址
            </summary>
        </member>
        <member name="M:BasicFramework.SoftMail.SendMail(System.Exception)">
            <summary>
            发生BUG至邮件地址，需要提前指定发送地址，否则失败
            </summary>
            <param name="ex">异常的BUG，同样试用兼容类型</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:BasicFramework.SoftMail.SendMail(System.String,System.String)">
            <summary>
            发送邮件至地址，需要提前指定发送地址，否则失败
            </summary>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:BasicFramework.SoftMail.SendMail(System.Exception,System.String)">
            <summary>
            发生BUG至邮件地址，需要提前指定发送地址，否则失败
            </summary>
            <param name="ex">异常的BUG，同样试用兼容类型</param>
            <param name="addtion">额外信息</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:BasicFramework.SoftMail.SendMail(System.String,System.String,System.String)">
            <summary>
            发送邮件的方法，默认发送别名，优先级，是否HTML
            </summary>
            <param name="addr_to">接收地址</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:BasicFramework.SoftMail.SendMail(System.String,System.String,System.String[],System.String,System.String,System.Net.Mail.MailPriority,System.Boolean)">
            <summary>
            发送邮件的方法，需要提供完整的参数信息
            </summary>
            <param name="addr_from">发送地址</param>
            <param name="name">发送别名</param>
            <param name="addr_to">接收地址</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="priority">优先级</param>
            <param name="isHtml">邮件内容是否是HTML语言</param>
            <returns>发生是否成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="T:BasicFramework.SoftPaint">
            <summary>
            静态类，包含了几个常用的画图方法，获取字符串，绘制小三角等
            </summary>
        </member>
        <member name="T:BasicFramework.SoftSqlOperate">
            <summary>
            数据库操作的相关类，包含了常用的方法，避免大量的重复代码
            </summary>
        </member>
        <member name="M:BasicFramework.SoftSqlOperate.ExecuteSql(System.String,System.String)">
            <summary>
            普通的执行SQL语句，并返回影响行数，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，适合插入，更新，删除</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:BasicFramework.SoftSqlOperate.ExecuteSql(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            普通的执行SQL语句，并返回影响行数，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库的连接对象</param>
            <param name="cmdStr">sql语句，适合插入，更新，删除</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:BasicFramework.SoftSqlOperate.ExecuteSelectTable(System.String,System.String)">
            <summary>
            选择数据表的执行SQL语句，并返回最终数据表，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据表</returns>
        </member>
        <member name="M:BasicFramework.SoftSqlOperate.ExecuteSelectTable(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            选择数据表的执行SQL语句，并返回最终数据表，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库连接对象</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据表</returns>
        </member>
        <member name="M:BasicFramework.SoftSqlOperate.ExecuteSelectEnumerable``1(System.String,System.String)">
            <summary>
            选择指定类型数据集合执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据集合</returns>
        </member>
        <member name="M:BasicFramework.SoftSqlOperate.ExecuteSelectEnumerable``1(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            选择指定类型数据集合执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库的连接对象</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据集合</returns>
        </member>
        <member name="M:BasicFramework.SoftSqlOperate.ExecuteSelectObject``1(System.String,System.String)">
            <summary>
            更新指定类型数据执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据</returns>
        </member>
        <member name="M:BasicFramework.SoftSqlOperate.ExecuteSelectObject``1(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            更新指定类型数据执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库的连接对象</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据</returns>
        </member>
        <member name="T:BasicFramework.ISqlDataType">
            <summary>
            数据库对应类的读取接口
            </summary>
        </member>
        <member name="M:BasicFramework.ISqlDataType.LoadBySqlDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            根据sdr对象初始化数据的方法
            </summary>
            <param name="sdr"></param>
        </member>
        <member name="T:BasicFramework.SoftUserControls">
            <summary>
            一个用来管理多个用户控件显示的类
            </summary>
        </member>
        <member name="P:BasicFramework.SoftUserControls.CurrentControl">
            <summary>
            当前的窗口
            </summary>
        </member>
        <member name="T:BasicFramework.UserClock">
            <summary>
            一个时钟控件
            </summary>
        </member>
        <member name="M:BasicFramework.UserClock.#ctor">
            <summary>
            实例化一个时钟控件
            </summary>
        </member>
        <member name="P:BasicFramework.UserClock.当前时间">
            <summary>
            获取时钟的当前时间
            </summary>
        </member>
        <member name="P:BasicFramework.UserClock.时钟指针颜色">
            <summary>
            获取或设置时钟指针的颜色
            </summary>
        </member>
        <member name="P:BasicFramework.UserClock.分钟指针颜色">
            <summary>
            获取或设置时钟分钟指针颜色
            </summary>
        </member>
        <member name="P:BasicFramework.UserClock.秒钟指针颜色">
            <summary>
            获取或设置秒钟指针颜色
            </summary>
        </member>
        <member name="P:BasicFramework.UserClock.显示文本">
            <summary>
            获取或设置时钟的个性化文本
            </summary>
        </member>
        <member name="P:BasicFramework.UserClock.显示文本字体">
            <summary>
            字体
            </summary>
        </member>
        <member name="M:BasicFramework.UserClock.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘控件显示
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:BasicFramework.UserClock.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:BasicFramework.UserClock.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:BasicFramework.UserClock.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:BasicFramework.FormAbout">
            <summary>
            系统的关于类
            </summary>
        </member>
        <member name="M:BasicFramework.FormAbout.#ctor(System.String,BasicFramework.SystemVersion,System.Int32,System.String)">
            <summary>
            实例化一个关于系统的窗口对象
            </summary>
            <param name="softName">应用程序的名称</param>
            <param name="sv">系统的版本</param>
            <param name="yearStart">应用起始年份</param>
            <param name="belongName">本系统的版权归属人</param>
        </member>
        <member name="M:BasicFramework.FormAbout.#ctor(BasicFramework.SystemVersion,System.Int32,System.String)">
            <summary>
            实例化一个关于系统的窗口对象
            </summary>
            <param name="sv">系统的版本</param>
            <param name="yearStart">版权起始年份</param>
            <param name="belongName">本系统的版权归属人</param>
        </member>
        <member name="F:BasicFramework.FormAbout.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormAbout.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormAbout.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BasicFramework.FormAboutVersion">
            <summary>
            关于版本的信息类
            </summary>
        </member>
        <member name="M:BasicFramework.FormAboutVersion.#ctor(BasicFramework.SystemVersion)">
            <summary>
            实例化一个版本信息说明的窗口对象
            </summary>
            <param name="sv">系统的版本号</param>
        </member>
        <member name="F:BasicFramework.FormAboutVersion.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormAboutVersion.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormAboutVersion.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BasicFramework.FormAccountChange">
            <summary>
            密码更改的窗口，需要使用一个委托方法来更新
            </summary>
        </member>
        <member name="M:BasicFramework.FormAccountChange.#ctor(BasicFramework.UserAccount,System.Func{System.String,System.Boolean},System.Int32,System.Int32)">
            <summary>
            实例化一个密码更改窗口对象
            </summary>
            <param name="account">用户的账户</param>
            <param name="passwordModify">修改密码的方法</param>
            <param name="passwordLengthMax">允许最长的密码</param>
            <param name="passwordLengthMin">允许最短的密码</param>
        </member>
        <member name="F:BasicFramework.FormAccountChange.Account">
            <summary>
            系统登录的账户
            </summary>
        </member>
        <member name="M:BasicFramework.FormAccountChange.OnPasswordSumit(System.Object,System.EventArgs)">
            <summary>
            提交密码修改的代码，该方法需要继承重写才能实现
            </summary>
            <param name="sender">点击按钮</param>
            <param name="e">普通的事件</param>
        </member>
        <member name="F:BasicFramework.FormAccountChange.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormAccountChange.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormAccountChange.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BasicFramework.FormAuthorize">
            <summary>
            用来测试版软件授权的窗口
            </summary>
        </member>
        <member name="M:BasicFramework.FormAuthorize.#ctor(BasicFramework.SoftAuthorize,System.String,System.Func{System.String,System.String})">
            <summary>
            实例化授权注册窗口
            </summary>
            <param name="authorize"></param>
            <param name="aboutCode">提示关于怎么获取注册码的信息</param>
            <param name="encrypt">加密的方法</param>
        </member>
        <member name="F:BasicFramework.FormAuthorize.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormAuthorize.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormAuthorize.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BasicFramework.FormMaintenance">
            <summary>
            维护变更的窗口，用来维护服务器的状态，有可能处于维护中
            </summary>
        </member>
        <member name="M:BasicFramework.FormMaintenance.#ctor(BasicFramework.ServerSettings)">
            <summary>
            实例化一个窗口对象，用来更改系统的维护状态，然后进行保存
            </summary>
            <param name="settings">服务器的参数对象</param>
        </member>
        <member name="F:BasicFramework.FormMaintenance.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormMaintenance.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormMaintenance.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BasicFramework.FormPasswordCheck">
            <summary>
            密码检查的窗口
            </summary>
        </member>
        <member name="M:BasicFramework.FormPasswordCheck.#ctor(System.String)">
            <summary>
            实例化一个检查输入密码的窗口
            </summary>
            <param name="pass">需要配对的密码</param>
        </member>
        <member name="F:BasicFramework.FormPasswordCheck.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormPasswordCheck.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormPasswordCheck.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BasicFramework.FormUpdateLog">
            <summary>
            系统更新日志类窗体
            </summary>
        </member>
        <member name="M:BasicFramework.FormUpdateLog.#ctor(BasicFramework.ClassSystemVersion)">
            <summary>
            实例化一个更新窗口的对象，用来呈现更新日志
            </summary>
            <param name="csv">包含了更新细节的一个对象，更新日志，更新内容</param>
        </member>
        <member name="F:BasicFramework.FormUpdateLog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormUpdateLog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormUpdateLog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BasicFramework.FormVersionControl">
            <summary>
            控制版本号的窗口类
            </summary>
        </member>
        <member name="M:BasicFramework.FormVersionControl.#ctor(BasicFramework.ServerSettings)">
            <summary>
            
            </summary>
            <param name="settings"></param>
        </member>
        <member name="F:BasicFramework.FormVersionControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormVersionControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormVersionControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BasicFramework.FormWaitInfomation">
            <summary>
            延时指定时间的窗口类
            </summary>
        </member>
        <member name="M:BasicFramework.FormWaitInfomation.#ctor(System.String,System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            实例化一个等待指定显示时间的窗口，时间一到，自动退出
            </summary>
            <param name="info">显示的文本</param>
            <param name="waitTime">等待时间，单位毫秒，最低为100毫秒</param>
            <param name="back">文本的背景色</param>
            <param name="fore">文本的前景色</param>
        </member>
        <member name="M:BasicFramework.FormWaitInfomation.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个等待指定显示时间的窗口，时间一到，自动退出
            </summary>
            <param name="info">显示的文本</param>
            <param name="waitTime">等待时间，单位毫秒</param>
        </member>
        <member name="F:BasicFramework.FormWaitInfomation.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BasicFramework.FormWaitInfomation.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BasicFramework.FormWaitInfomation.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BasicFramework.HuProcessBar">
            <summary>
            自定义的进度条控件
            </summary>
        </member>
        <member name="M:BasicFramework.HuProcessBar.#ctor">
            <summary>
            实例化一个进度条控件
            </summary>
        </member>
        <member name="P:BasicFramework.HuProcessBar.HasBorder">
            <summary>
            边框是否有无
            </summary>
        </member>
        <member name="P:BasicFramework.HuProcessBar.ActiualPosition">
            <summary>
            实际画图的点位
            </summary>
        </member>
        <member name="F:BasicFramework.HuProcessBar.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:BasicFramework.HuProcessBar.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:BasicFramework.HuProcessBar.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:BasicFramework.SoftBasic">
            <summary>
            一个软件基础类，提供常用的一些静态方法
            </summary>
        </member>
        <member name="M:BasicFramework.SoftBasic.GetValueFromJsonObject``1(Newtonsoft.Json.Linq.JObject,System.String,``0)">
            <summary>
            一个泛型方法，提供json对象的数据读取
            </summary>
            <typeparam name="T">读取的泛型</typeparam>
            <param name="json">json对象</param>
            <param name="value_name">值名称</param>
            <param name="default_value">默认值</param>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.SoftBasic.JsonSetValue``1(Newtonsoft.Json.Linq.JObject,System.String,``0)">
            <summary>
            一个泛型方法，提供json对象的数据写入
            </summary>
            <typeparam name="T">写入的泛型</typeparam>
            <param name="json">json对象</param>
            <param name="property">值名称</param>
            <param name="value">值数据</param>
        </member>
        <member name="M:BasicFramework.SoftBasic.ShowExceptionMessage(System.Exception)">
            <summary>
            显示一个完整的错误信息
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:BasicFramework.SoftBasic.GetExceptionMessage(System.Exception)">
            <summary>
            获取一个异常的完整错误信息
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="F:BasicFramework.SoftBasic.FrameworkVersion">
            <summary>
            本框架的版本号
            </summary>
        </member>
        <member name="M:BasicFramework.SoftBasic.ByteToHexString(System.Byte[])">
            <summary>
            字节数据转化成16进制表示的字符串
            </summary>
            <param name="InBytes">字节数组</param>
            <returns>返回的字符串</returns>
        </member>
        <member name="M:BasicFramework.SoftBasic.ByteToHexString(System.String)">
            <summary>
            字符串数据转化成16进制表示的字符串
            </summary>
            <param name="InString">输入的字符串数据</param>
            <returns>返回的字符串</returns>
        </member>
        <member name="T:BasicFramework.MessageBoard">
            <summary>
            系统的消息类，用来发送消息，和确认消息的
            </summary>
        </member>
        <member name="P:BasicFramework.MessageBoard.NameSend">
            <summary>
            发送方名称
            </summary>
        </member>
        <member name="P:BasicFramework.MessageBoard.NameReceive">
            <summary>
            接收方名称
            </summary>
        </member>
        <member name="P:BasicFramework.MessageBoard.SendTime">
            <summary>
            发送时间
            </summary>
        </member>
        <member name="P:BasicFramework.MessageBoard.Content">
            <summary>
            发送的消息内容
            </summary>
        </member>
        <member name="T:BasicFramework.ServerArraySave`1">
            <summary>
            一个泛型类，支持数组的存储获取
            </summary>
        </member>
        <member name="F:BasicFramework.ServerArraySave`1.all_items">
            <summary>
            所有临时存储的数据
            </summary>
        </member>
        <member name="P:BasicFramework.ServerArraySave`1.MaxCache">
            <summary>
            临时消息存储的最大条数，必须大于10
            </summary>
        </member>
        <member name="P:BasicFramework.ServerArraySave`1.CurrentItem">
            <summary>
            获取最新添加进去的数据
            </summary>
        </member>
        <member name="F:BasicFramework.ServerArraySave`1.lock_queue">
            <summary>
            将集合进行锁定
            </summary>
        </member>
        <member name="M:BasicFramework.ServerArraySave`1.AddNewItem(`0)">
            <summary>
            新增一条数据
            </summary>
        </member>
        <member name="M:BasicFramework.ServerArraySave`1.LoadByFile">
            <summary>
            不使用解密方法从文件读取数据
            </summary>
        </member>
        <member name="M:BasicFramework.ServerArraySave`1.LoadByFile(System.Converter{System.String,System.String})">
            <summary>
            使用用户自定义的解密方法从文件读取数据
            </summary>
            <param name="decrypt">用户自定义的解密方法</param>
        </member>
        <member name="M:BasicFramework.ServerArraySave`1.SaveToFile">
            <summary>
            不使用加密方法保存数据到文件
            </summary>
        </member>
        <member name="M:BasicFramework.ServerArraySave`1.SaveToFile(System.Converter{System.String,System.String})">
            <summary>
            使用用户自定义的加密方法保存数据到文件
            </summary>
            <param name="encrypt">用户自定义的加密方法</param>
        </member>
        <member name="P:BasicFramework.ServerArraySave`1.FileSavePath">
            <summary>
            文件存储的路径
            </summary>
        </member>
        <member name="T:BasicFramework.ServerSettings">
            <summary>
            服务器的常用参数保存，包含了版本号，公告，是否允许登录，不能登录说明
            </summary>
        </member>
        <member name="P:BasicFramework.ServerSettings.SystemVersion">
            <summary>
            系统的版本号，可以用来验证版本更新的依据
            初始化1.0.0
            </summary>
        </member>
        <member name="P:BasicFramework.ServerSettings.Announcement">
            <summary>
            系统的公告信息，默认为测试公告
            </summary>
        </member>
        <member name="P:BasicFramework.ServerSettings.Can_Account_Login">
            <summary>
            是否允许账户登录
            超级管理员账户除外
            </summary>
        </member>
        <member name="P:BasicFramework.ServerSettings.Account_Forbidden_Reason">
            <summary>
            不允许登录系统的原因
            </summary>
        </member>
        <member name="P:BasicFramework.ServerSettings.FileSavePath">
            <summary>
            文件存储的路径
            </summary>
        </member>
        <member name="M:BasicFramework.ServerSettings.LoadByFile">
            <summary>
            加载存储的信息，程序刚运行时加载一次即可
            </summary>
        </member>
        <member name="M:BasicFramework.ServerSettings.SaveToFile">
            <summary>
            在服务器退出之前进行保存
            </summary>
        </member>
        <member name="T:BasicFramework.JsonSettings">
            <summary>
            用户客户端存储本地JSON数据的类，包含了所有需要存储的信息
            </summary>
        </member>
        <member name="M:BasicFramework.JsonSettings.#ctor">
            <summary>
            实例化一个设置的对象
            </summary>
        </member>
        <member name="P:BasicFramework.JsonSettings.IsNewVersionRunning">
            <summary>
            指示系统是否是更新后第一次运行
            </summary>
        </member>
        <member name="P:BasicFramework.JsonSettings.LoginName">
            <summary>
            上次系统登录的用户名
            </summary>
        </member>
        <member name="P:BasicFramework.JsonSettings.Password">
            <summary>
            上次系统登录的密码
            </summary>
        </member>
        <member name="P:BasicFramework.JsonSettings.FileSavePath">
            <summary>
            参数文件的存储路径
            </summary>
        </member>
        <member name="P:BasicFramework.JsonSettings.SystemInfo">
            <summary>
            当前计算机的机器码，用来判定参数是否是正确的
            </summary>
        </member>
        <member name="M:BasicFramework.JsonSettings.LoadSettings">
            <summary>
            使用默认的加密算法加载系统的设置信息，程序刚运行时就应该加载数据
            </summary>
        </member>
        <member name="M:BasicFramework.JsonSettings.LoadSettings(System.Converter{System.String,System.String})">
            <summary>
            使用自定义的解密规则加载系统的设置信息，程序刚运行时就应该加载数据
            </summary>
        </member>
        <member name="M:BasicFramework.JsonSettings.SaveSettings">
            <summary>
            使用默认的加密规则，将所有的参数进行存储
            </summary>
        </member>
        <member name="M:BasicFramework.JsonSettings.SaveSettings(System.Converter{System.String,System.String})">
            <summary>
            使用指定的加密规则加密密码，然后将所有的参数进行存储
            </summary>
        </member>
        <member name="T:BasicFramework.UserAccount">
            <summary>
             本系統的用账户类，包含了一些常用的数据信息，如果你想添加额外属性，请继承此类
            </summary>
        </member>
        <member name="P:BasicFramework.UserAccount.UserName">
            <summary>
            用戶名稱，該信息是唯一的，不允許重複的
            </summary>
        </member>
        <member name="P:BasicFramework.UserAccount.Password">
            <summary>
            用户登录的密码
            </summary>
        </member>
        <member name="P:BasicFramework.UserAccount.Factory">
            <summary>
            账户所属的工厂名称或类别名称
            </summary>
        </member>
        <member name="P:BasicFramework.UserAccount.Grade">
            <summary>
            用户的权限等级，目前配置了4个等级
            </summary>
        </member>
        <member name="P:BasicFramework.UserAccount.RegisterTime">
            <summary>
            该用户的注册日期，一旦注册，应该固定
            </summary>
        </member>
        <member name="P:BasicFramework.UserAccount.LoginEnable">
            <summary>
            该用户是否允许登录
            </summary>
        </member>
        <member name="P:BasicFramework.UserAccount.ForbidMessage">
            <summary>
            该用户不允许被登录的原因
            </summary>
        </member>
        <member name="P:BasicFramework.UserAccount.LoginFrequency">
            <summary>
            该用户自注册以来登录的次数
            </summary>
        </member>
        <member name="P:BasicFramework.UserAccount.LastLoginTime">
            <summary>
            该用户上次登录的时间
            </summary>
        </member>
        <member name="P:BasicFramework.UserAccount.LastLoginIpAddress">
            <summary>
            该用户上次登录的IP地址
            </summary>
        </member>
        <member name="P:BasicFramework.UserAccount.LoginFailedCount">
            <summary>
            该用户连续登录失败的计数，可以用来连续五次失败禁止账户登录
            </summary>
        </member>
        <member name="P:BasicFramework.UserAccount.UserNameText">
            <summary>
            用于存储的名称
            </summary>
        </member>
        <member name="P:BasicFramework.UserAccount.PasswordText">
            <summary>
            用于存储的名称
            </summary>
        </member>
        <member name="M:BasicFramework.UserAccount.DeepCopy``1">
            <summary>
            深度拷贝当前的账户信息
            </summary>
            <typeparam name="T">返回的类型，应该为继承后的类型</typeparam>
            <returns>新的对象</returns>
        </member>
        <member name="M:BasicFramework.UserAccount.ToString">
            <summary>
            获取账号的用户名
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.UserAccount.ToJsonString">
            <summary>
            获取本账号的JSON字符串，用于在网络中数据传输
            </summary>
            <returns></returns>
        </member>
        <member name="T:BasicFramework.AccountGrade">
            <summary>
            账户的等级
            </summary>
        </member>
        <member name="P:BasicFramework.AccountGrade.SuperAdministrator">
            <summary>
            超级管理员
            </summary>
        </member>
        <member name="P:BasicFramework.AccountGrade.Admin">
            <summary>
            管理员
            </summary>
        </member>
        <member name="P:BasicFramework.AccountGrade.Technology">
            <summary>
            技术员
            </summary>
        </member>
        <member name="P:BasicFramework.AccountGrade.General">
            <summary>
            一般
            </summary>
        </member>
        <member name="M:BasicFramework.AccountGrade.GetDescription(System.Int32)">
            <summary>
            获取对应等级的文本描述
            </summary>
            <param name="grade">等级数据</param>
            <returns>等级描述</returns>
        </member>
        <member name="M:BasicFramework.AccountGrade.GetDescription">
            <summary>
            获取权限的数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.AccountGrade.GetDescription(System.Converter{System.Int32,System.String},System.Int32)">
            <summary>
            获取对应等级的文本描述
            </summary>
            <param name="grade">等级数据</param>
            <param name="converter">用户自定义的转化名称</param>
            <returns>等级描述</returns>
        </member>
        <member name="T:BasicFramework.ServerAccounts`1">
            <summary>
            服务器的账户管理类，如果你采用这种方式存储，必须仔细阅读说明手册
            </summary>
            <typeparam name="T">账户类，该类必须派生自UserAccount类</typeparam>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.#ctor">
            <summary>
            初始化構造方法
            </summary>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化構造方法，将添加几个初始化账户
            </summary>
        </member>
        <member name="P:BasicFramework.ServerAccounts`1.FileSavePath">
            <summary>
            所有的帳戶信息存儲的位置，只有設置了才進行保存
            </summary>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.UpdatePassword(System.String,System.String)">
            <summary>
            更新指定账户的密码
            </summary>
            <param name="name"></param>
            <param name="password"></param>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.WhereAccounts(System.Func{`0,System.Boolean})">
            <summary>
            筛选特定的账户信息
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            将所有账户信息转换成另一种元素，并返回列表
            </summary>
            <typeparam name="TResult">目标类型</typeparam>
            <param name="converter">转换方法</param>
            <returns>转换后的结果列表</returns>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.CheckAccount(System.String,System.String,System.String)">
            <summary>
            檢查帳戶信息，並返回有說明的帳戶對象
            </summary>
            <param name="name">需要驗證的信息</param>
            <param name="code">需要驗證的密碼</param>
            <param name="ipAddress">登录的ip地址</param>
            <returns>驗證結果對象</returns>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.AddNewAccount(System.String)">
            <summary>
            新增一个账户，如果账户名称已经存在，则返回False，注册成功返回True
            </summary>
            <param name="json_account">账户对象的JSON表示方式</param>
            <returns>成功True，失败False</returns>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.AddNewAccount(`0)">
            <summary>
            新增一个账户，如果账户名称已经存在，则返回False，注册成功返回True
            </summary>
            <param name="account">账户对象</param>
            <returns>成功True，失败False</returns>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.DeleteAccount(System.String)">
            <summary>
            删除一个账户信息，
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.CheckAccountJson(System.String,System.String,System.String)">
            <summary>
            檢查帳戶並返回帳戶對象的JSON字符串
            </summary>
            <param name="name">登录的用户名</param>
            <param name="code">登录的密码</param>
            <param name="ipAddress">检查的客户端的登录的ip地址</param>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.GetAllAccountsJson">
            <summary>
            獲取所有的帳戶的JSON字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.LoadAllAccountsJson(System.String)">
            <summary>
            從所有帳戶的JSON字符串加載帳戶
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.SaveFile">
            <summary>
            使用Base64编码將所有的帳戶信息保存到文件
            </summary>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.SaveFile(System.Converter{System.String,System.String})">
            <summary>
            使用自定义的加密方法将所有帳戶信息保存到文件
            </summary>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.LoadByFile">
            <summary>
            使用Base64编码從文件加載所有的帳戶
            </summary>
        </member>
        <member name="M:BasicFramework.ServerAccounts`1.LoadByFile(System.Converter{System.String,System.String})">
            <summary>
            使用自定义的解密方法加載所有的帳戶
            </summary>
        </member>
        <member name="T:BasicFramework.SoftAuthorize">
            <summary>
            软件授权类
            </summary>
        </member>
        <member name="M:BasicFramework.SoftAuthorize.#ctor">
            <summary>
            实例化一个软件授权类
            </summary>
        </member>
        <member name="F:BasicFramework.SoftAuthorize.TextCode">
            <summary>
            注册码描述文本
            </summary>
        </member>
        <member name="P:BasicFramework.SoftAuthorize.IsReleaseVersion">
            <summary>
            是否正式发行版，是的话就取消授权
            </summary>
        </member>
        <member name="P:BasicFramework.SoftAuthorize.HasLoadByFile">
            <summary>
            指示是否加载过文件信息
            </summary>
        </member>
        <member name="P:BasicFramework.SoftAuthorize.filePath">
            <summary>
            授权文件的存储路径
            </summary>
        </member>
        <member name="P:BasicFramework.SoftAuthorize.IsSoftTrial">
            <summary>
            指示系统是否处于试用运行
            </summary>
        </member>
        <member name="M:BasicFramework.SoftAuthorize.GetMachineCodeString">
            <summary>
            获取本机的机器码
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.SoftAuthorize.LoadByFile">
            <summary>
            加载授权文件的信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.SoftAuthorize.GetSaveString">
            <summary>
            获取存储的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.SoftAuthorize.SaveToFile">
            <summary>
            保存配置信息
            </summary>
        </member>
        <member name="M:BasicFramework.SoftAuthorize.CheckAuthorize(System.String,System.Func{System.String,System.String})">
            <summary>
            检查该注册码是否是正确的注册码
            </summary>
            <param name="code"></param>
            <param name="encrypt">数据加密的方法，必须用户指定</param>
            <returns>是否注册成功</returns>
        </member>
        <member name="M:BasicFramework.SoftAuthorize.IsAuthorizeSuccess(System.Func{System.String,System.String})">
            <summary>
            检测授权是否成功
            </summary>
            <param name="encrypt">数据加密的方法，必须用户指定</param>
            <returns>是否成功授权</returns>
        </member>
        <member name="M:BasicFramework.SoftAuthorize.GetInfo">
            <summary>
            获取本计算机唯一的机器码
            </summary>
            <returns></returns>
        </member>
        <member name="T:BasicFramework.MD5Code">
            <summary>
            字符串加密解密相关的自定义类
            </summary>
        </member>
        <member name="M:BasicFramework.MD5Code.MD5Encrypt(System.String)">
            <summary>
            加密数据，采用对称加密的方式
            </summary>
            <param name="pToEncrypt">待加密的数据</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:BasicFramework.MD5Code.MD5Encrypt(System.String,System.String)">
            <summary>
            加密数据，采用对称加密的方式
            </summary>
            <param name="pToEncrypt">待加密的数据</param>
            <param name="Password">密钥，长度为8，英文或数字</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:BasicFramework.MD5Code.MD5Decrypt(System.String)">
            <summary>
            解密过程，使用的是对称的加密
            </summary>
            <param name="pToDecrypt">等待解密的字符</param>
            <returns>返回原密码，如果解密失败，返回‘解密失败’</returns>
        </member>
        <member name="M:BasicFramework.MD5Code.MD5Decrypt(System.String,System.String)">
            <summary>
            解密过程，使用的是对称的加密
            </summary>
            <param name="pToDecrypt">等待解密的字符</param>
            <param name="password">密钥，长度为8，英文或数字</param>
            <returns>返回原密码，如果解密失败，返回‘解密失败’</returns>
        </member>
        <member name="T:BasicFramework.ClassSystemVersion">
            <summary>
            实际的使用
            </summary>
        </member>
        <member name="M:BasicFramework.ClassSystemVersion.#ctor">
            <summary>
            实例化一个系统版本类
            </summary>
        </member>
        <member name="F:BasicFramework.ClassSystemVersion.Versions">
            <summary>
            所有版本信息类
            </summary>
        </member>
        <member name="T:BasicFramework.SystemVersion">
            <summary>
            系统版本类，由三部分组成，包含了一个大版本，小版本，修订版，还有一个开发者维护的内部版
            </summary>
        </member>
        <member name="M:BasicFramework.SystemVersion.#ctor(System.String)">
            <summary>
            根据格式化字符串的版本号初始化
            </summary>
            <param name="VersionString">格式化的字符串，例如：1.0.0</param>
        </member>
        <member name="M:BasicFramework.SystemVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            根据指定的数字实例化一个对象
            </summary>
            <param name="main">主版本</param>
            <param name="sec">次版本</param>
            <param name="edit">修订版</param>
        </member>
        <member name="M:BasicFramework.SystemVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            根据指定的数字实例化一个对象
            </summary>
            <param name="main">主版本</param>
            <param name="sec">次版本</param>
            <param name="edit">修订版</param>
            <param name="inner">内部版本号</param>
        </member>
        <member name="P:BasicFramework.SystemVersion.MainVersion">
            <summary>
            主版本
            </summary>
        </member>
        <member name="P:BasicFramework.SystemVersion.SecondaryVersion">
            <summary>
            次版本
            </summary>
        </member>
        <member name="P:BasicFramework.SystemVersion.EditVersion">
            <summary>
            修订版
            </summary>
        </member>
        <member name="P:BasicFramework.SystemVersion.InnerVersion">
            <summary>
            内部版本号，或者是版本号表示为年月份+内部版本的表示方式
            </summary>
        </member>
        <member name="M:BasicFramework.SystemVersion.ToString">
            <summary>
            获取版本号的字符串形式
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.SystemVersion.op_Equality(BasicFramework.SystemVersion,BasicFramework.SystemVersion)">
            <summary>
            判断是否相等
            </summary>
            <param name="SV1">第一个版本</param>
            <param name="SV2">第二个版本</param>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.SystemVersion.op_Inequality(BasicFramework.SystemVersion,BasicFramework.SystemVersion)">
            <summary>
            判断是否不相等
            </summary>
            <param name="SV1">第一个版本号</param>
            <param name="SV2">第二个版本号</param>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.SystemVersion.op_GreaterThan(BasicFramework.SystemVersion,BasicFramework.SystemVersion)">
            <summary>
            判断一个版本是否大于另一个版本
            </summary>
            <param name="SV1">第一个版本</param>
            <param name="SV2">第二个版本</param>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.SystemVersion.op_LessThan(BasicFramework.SystemVersion,BasicFramework.SystemVersion)">
            <summary>
            判断第一个版本是否小于第二个版本
            </summary>
            <param name="SV1"></param>
            <param name="SV2"></param>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.SystemVersion.Equals(System.Object)">
            <summary>
            判断两个实例是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:BasicFramework.SystemVersion.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="T:BasicFramework.VersionInfo">
            <summary>
            版本信息类，用于展示版本发布信息
            </summary>
        </member>
        <member name="P:BasicFramework.VersionInfo.ReleaseDate">
            <summary>
            版本的发行日期
            </summary>
        </member>
        <member name="P:BasicFramework.VersionInfo.UpdateDetails">
            <summary>
            版本的更新细节
            </summary>
        </member>
        <member name="P:BasicFramework.VersionInfo.VersionNum">
            <summary>
            版本号
            </summary>
        </member>
        <member name="M:BasicFramework.VersionInfo.ToString">
            <summary>
            获取版本号
            </summary>
            <returns></returns>
        </member>
        <member name="T:BasicFramework.UserButton">
            <summary>
            一个自定义的按钮控件
            </summary>
        </member>
        <member name="M:BasicFramework.UserButton.#ctor">
            <summary>
            实例化一个按钮对象
            </summary>
        </member>
        <member name="P:BasicFramework.UserButton.UIText">
            <summary>
            设置或获取显示的文本
            </summary>
        </member>
        <member name="P:BasicFramework.UserButton.TextColor">
            <summary>
            设置或获取显示文本的颜色
            </summary>
        </member>
        <member name="P:BasicFramework.UserButton.CornerRadius">
            <summary>
            设置按钮的圆角
            </summary>
        </member>
        <member name="P:BasicFramework.UserButton.Selected">
            <summary>
            用来设置按钮的选中状态
            </summary>
        </member>
        <member name="P:BasicFramework.UserButton.ForeColor">
            <summary>
            已经弃用
            </summary>
        </member>
        <member name="P:BasicFramework.UserButton.Text">
            <summary>
            已经弃用
            </summary>
        </member>
        <member name="P:BasicFramework.UserButton.OriginalColor">
            <summary>
            按钮的背景色
            </summary>
        </member>
        <member name="P:BasicFramework.UserButton.EnableColor">
            <summary>
            按钮的背景色
            </summary>
        </member>
        <member name="P:BasicFramework.UserButton.ActiveColor">
            <summary>
            鼠标挪动时的活动颜色
            </summary>
        </member>
        <member name="P:BasicFramework.UserButton.BorderVisiable">
            <summary>
            设置按钮的边框是否可见
            </summary>
        </member>
        <member name="P:BasicFramework.UserButton.CustomerInformation">
            <summary>
            存放用户需要保存的一些额外的信息
            </summary>
        </member>
        <member name="M:BasicFramework.UserButton.PerformClick">
            <summary>
            触发一次点击的事件
            </summary>
        </member>
        <member name="M:BasicFramework.UserButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘数据区
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:BasicFramework.UserButton.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:BasicFramework.UserButton.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:BasicFramework.UserButton.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
    </members>
</doc>
